"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const image_generation_agent_1 = require("../lambda/image-generation-agent");
// Mock AWS SDK
jest.mock('@aws-sdk/client-dynamodb');
jest.mock('@aws-sdk/lib-dynamodb');
jest.mock('@aws-sdk/client-s3');
jest.mock('@aws-sdk/client-sqs');
// Mock fetch
global.fetch = jest.fn();
// Mock environment variables
process.env.CONTENT_TABLE = 'test-content-table';
process.env.IMAGE_BUCKET = 'test-image-bucket';
process.env.ORCHESTRATOR_QUEUE = 'test-orchestrator-queue';
process.env.OPENAI_API_KEY = 'test-openai-key';
describe('Image Generation Agent', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    const createMockEvent = (body, httpMethod = 'POST') => ({
        httpMethod,
        body: JSON.stringify(body),
        headers: {
            'origin': 'https://keiranholloway.github.io',
            'content-type': 'application/json',
        },
        multiValueHeaders: {},
        pathParameters: null,
        queryStringParameters: null,
        multiValueQueryStringParameters: null,
        stageVariables: null,
        requestContext: {},
        resource: '',
        path: '',
        isBase64Encoded: false,
    });
    describe('CORS handling', () => {
        it('should handle OPTIONS requests', async () => {
            const event = createMockEvent({}, 'OPTIONS');
            const result = await (0, image_generation_agent_1.handler)(event);
            expect(result.statusCode).toBe(200);
            expect(result.headers).toHaveProperty('Access-Control-Allow-Origin');
            expect(result.headers).toHaveProperty('Access-Control-Allow-Methods');
        });
        it('should set correct CORS headers for allowed origins', async () => {
            const event = createMockEvent({
                contentId: 'test-content-id',
                prompt: 'Test prompt'
            });
            event.headers.origin = 'https://keiranholloway.github.io';
            // Mock successful OpenAI response
            global.fetch.mockResolvedValueOnce({
                ok: true,
                json: async () => ({
                    data: [{ url: 'https://example.com/image.png' }]
                }),
            });
            // Mock S3 image download
            global.fetch.mockResolvedValueOnce({
                ok: true,
                arrayBuffer: async () => new ArrayBuffer(1024),
            });
            const result = await (0, image_generation_agent_1.handler)(event);
            expect(result.headers?.['Access-Control-Allow-Origin']).toBe('https://keiranholloway.github.io');
        });
    });
    describe('Request validation', () => {
        it('should return 400 for missing body', async () => {
            const event = createMockEvent(null);
            event.body = null;
            const result = await (0, image_generation_agent_1.handler)(event);
            expect(result.statusCode).toBe(400);
            expect(JSON.parse(result.body)).toHaveProperty('error', 'Request body is required');
        });
        it('should return 400 for missing contentId', async () => {
            const event = createMockEvent({
                prompt: 'Test prompt'
            });
            const result = await (0, image_generation_agent_1.handler)(event);
            expect(result.statusCode).toBe(400);
            expect(JSON.parse(result.body)).toHaveProperty('error', 'contentId and prompt are required');
        });
        it('should return 400 for missing prompt', async () => {
            const event = createMockEvent({
                contentId: 'test-content-id'
            });
            const result = await (0, image_generation_agent_1.handler)(event);
            expect(result.statusCode).toBe(400);
            expect(JSON.parse(result.body)).toHaveProperty('error', 'contentId and prompt are required');
        });
    });
    describe('Image generation', () => {
        it('should generate image successfully', async () => {
            const event = createMockEvent({
                contentId: 'test-content-id',
                prompt: 'A beautiful landscape',
                size: '1024x1024'
            });
            // Mock successful OpenAI response
            global.fetch.mockResolvedValueOnce({
                ok: true,
                json: async () => ({
                    data: [{ url: 'https://example.com/generated-image.png' }]
                }),
            });
            // Mock S3 image download
            global.fetch.mockResolvedValueOnce({
                ok: true,
                arrayBuffer: async () => new ArrayBuffer(1024),
            });
            const result = await (0, image_generation_agent_1.handler)(event);
            expect(result.statusCode).toBe(200);
            const responseBody = JSON.parse(result.body);
            expect(responseBody.success).toBe(true);
            expect(responseBody.imageUrl).toContain('test-image-bucket');
        });
        it('should handle OpenAI API errors', async () => {
            const event = createMockEvent({
                contentId: 'test-content-id',
                prompt: 'Test prompt'
            });
            // Mock OpenAI API error
            global.fetch.mockResolvedValueOnce({
                ok: false,
                json: async () => ({
                    error: { message: 'API quota exceeded' }
                }),
            });
            const result = await (0, image_generation_agent_1.handler)(event);
            expect(result.statusCode).toBe(500);
            const responseBody = JSON.parse(result.body);
            expect(responseBody.error).toContain('OpenAI API error');
        });
        it('should handle missing OpenAI API key', async () => {
            delete process.env.OPENAI_API_KEY;
            const event = createMockEvent({
                contentId: 'test-content-id',
                prompt: 'Test prompt'
            });
            const result = await (0, image_generation_agent_1.handler)(event);
            expect(result.statusCode).toBe(500);
            const responseBody = JSON.parse(result.body);
            expect(responseBody.error).toContain('OpenAI API key not configured');
            // Restore for other tests
            process.env.OPENAI_API_KEY = 'test-openai-key';
        });
        it('should handle network errors', async () => {
            const event = createMockEvent({
                contentId: 'test-content-id',
                prompt: 'Test prompt'
            });
            // Mock network error
            global.fetch.mockRejectedValueOnce(new Error('Network error'));
            const result = await (0, image_generation_agent_1.handler)(event);
            expect(result.statusCode).toBe(500);
            const responseBody = JSON.parse(result.body);
            expect(responseBody.error).toBe('Internal server error during image generation');
        });
    });
    describe('Image storage', () => {
        it('should handle S3 upload errors', async () => {
            const event = createMockEvent({
                contentId: 'test-content-id',
                prompt: 'Test prompt'
            });
            // Mock successful OpenAI response
            global.fetch.mockResolvedValueOnce({
                ok: true,
                json: async () => ({
                    data: [{ url: 'https://example.com/generated-image.png' }]
                }),
            });
            // Mock failed image download
            global.fetch.mockResolvedValueOnce({
                ok: false,
                statusText: 'Not Found',
            });
            const result = await (0, image_generation_agent_1.handler)(event);
            expect(result.statusCode).toBe(500);
            const responseBody = JSON.parse(result.body);
            expect(responseBody.error).toContain('Internal server error');
        });
    });
    describe('Request parameters', () => {
        it('should handle different image sizes', async () => {
            const event = createMockEvent({
                contentId: 'test-content-id',
                prompt: 'Test prompt',
                size: '1792x1024'
            });
            // Mock successful OpenAI response
            global.fetch.mockResolvedValueOnce({
                ok: true,
                json: async () => ({
                    data: [{ url: 'https://example.com/generated-image.png' }]
                }),
            });
            // Mock S3 image download
            global.fetch.mockResolvedValueOnce({
                ok: true,
                arrayBuffer: async () => new ArrayBuffer(1024),
            });
            const result = await (0, image_generation_agent_1.handler)(event);
            expect(result.statusCode).toBe(200);
            // Verify OpenAI was called with correct size
            expect(global.fetch).toHaveBeenCalledWith('https://api.openai.com/v1/images/generations', expect.objectContaining({
                body: expect.stringContaining('"size":"1792x1024"')
            }));
        });
        it('should use default size when not specified', async () => {
            const event = createMockEvent({
                contentId: 'test-content-id',
                prompt: 'Test prompt'
            });
            // Mock successful OpenAI response
            global.fetch.mockResolvedValueOnce({
                ok: true,
                json: async () => ({
                    data: [{ url: 'https://example.com/generated-image.png' }]
                }),
            });
            // Mock S3 image download
            global.fetch.mockResolvedValueOnce({
                ok: true,
                arrayBuffer: async () => new ArrayBuffer(1024),
            });
            const result = await (0, image_generation_agent_1.handler)(event);
            expect(result.statusCode).toBe(200);
            // Verify OpenAI was called with default size
            expect(global.fetch).toHaveBeenCalledWith('https://api.openai.com/v1/images/generations', expect.objectContaining({
                body: expect.stringContaining('"size":"1024x1024"')
            }));
        });
    });
});
//# sourceMappingURL=data:application/json;base64,